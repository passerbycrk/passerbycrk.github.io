<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mac下配置wine环境]]></title>
    <url>%2F2017%2F07%2F04%2Finstall%20wine%2F</url>
    <content type="text"><![CDATA[转自:在mac下配置wine环境——自己wine一个小游戏 当我们想要在 mac 上运行 labview 等 windows 下的大型软件时，使用 PD 等虚拟机可以很好的解决需求；然而如果我们只想玩些同人小游戏什么的，再开一个操作系统就觉得有点累赘了，这时我们可以选择wine，更加轻量的执行 windows 应用。 wine 的另一个好处时可以将 windows 应用打包成 APP，这样就可以直接拷贝给别人玩儿了！ 下面是踩过很多坑后总结出来的比较方便的在 mac 上配置 wine 的流程。 准备工作安装 Xcode 从 Mac Apple Store 安装 安装 XQuzrtz 在这里下载安装。 安装 homebrew $ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 温馨提示：homebrew 的源可选择使用清华大学TUNA镜像源提升速度 安装 wine安装 wine $ brew install wine 安装 winetricks $ brew install winetricks 运行应用程序现在我们已经可以执行 windows 应用程序啦。终端下输入 $ wine setup.exe 就可以执行 setup.exe。 执行 $ msiexec /i setup.msi 可以执行msi格式的安装程序。 安装常用库虽然理论上我们已经可以跑 windows 应用程序了，但是游戏还不能玩哦。因为很多依赖都没有安装，比如 .NET Framework，比如 DirectX9，比如 VCRUNTIME 等等。这时候我们需要 winetricks 来帮助我们安装库。 $ winetricks dotnet35 d3dx9 xna31 已有库的列表可通过 winetricks list 来查询。加参数 -q 可以静默安装。 不过 winetricks 这东西内置了复杂的 conflict 系统，有冲突时就不给安装。。比如先装完 .net 2.0再装 .net 3.5会报错。只能选择直接装 .net 3.5。 wine 有一份应用程序的兼容性文档，在装软件时可以先来查阅一下，会有兼容性评级和一些安装说明，十分好用！ 打包简易的 wineskin 小教程！ 下载 wineskin 安装engine和wrapper。不过 wineskin 自带下载没速度，还是到mediafire下载吧。下载时注意版本要和wine对应哦！ 都安装好engine和wrapper后，点击 Create new blank wrapper，输入文件名创建新包，弹出的提示都选 cancel，先不安装。 在wrapper里，运行 wineskin.app 选择 Advanced, tool 里有 winetricks 来装常用库，Configuration 中的 Windows EXE 中输入的应用程序路径就是最终打包成品 APP 双击运行的应用。如果有安装程序的话，路径填进去，选择 Test Run 跑一下。最后再把启动 exe 填进去。 PS. 如果之前在 wine 中装过程序了，直接把~/.wine下的 driver_c文件夹彻底拷贝到wrapper/Content/Resources下，然后指定下 exe 路径就可以直接拿来用。 wine 坑多坑大，很多程序不能完美运行，报错是免不了的，不要慌，google 多查一查！解决不了的，还是打开 PD 吧。 测试123运行环境macOS Sierra10.12.5 (16F73) 测试运行IDAPro v6.8绿色版成功 下载windows版IDA]]></content>
      <tags>
        <tag>Mac</tag>
        <tag>Install</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xcode Framework制作流程详情整理]]></title>
    <url>%2F2017%2F06%2F06%2Fxcode%20build%20framework%2F</url>
    <content type="text"><![CDATA[转自: Xcode 7 Framework制作流程详情整理 1、新建iOS-&gt;Framework &amp; Library-&gt;Cocoa Touch Framework 2、选择next进入下一步 3、在PROJECT-&gt;Deployment Target-&gt;iOS Deployment Target选择你需要支持的最低系统。 同样的操作在TARGETS中，Deployment Info-&gt;Deployment Target 4、由于我的framework需要支持iOS7，所以在第2、3步中进行了相应的设置。Build时会发现有️ld: warning: embedded dylibs/frameworks only run on iOS 8 or later警告，这是因为工程默认编译设置的是Dynamic Framework。这种编译只有在iOS8以后才能使用。 5、针对第4步中所出现的问题，根据需求我的工程不需要使用动态framework，以使用其动态更新的功能。动态库可以分开发布，在运行时查找并存入内存，但苹果只允许他自己用，到iOS8以后才开放给开发者。因此，我需要将Dynamic Framework更换为Static Library静态模式。设置路径为Build Settings-&gt;Linking-&gt;Mach-O Type-&gt;Static Library 6、这里要注意，在编译时，不要将图片文件放在工程里面，否则编译后framework中会出现大量的零散图片文件在里面。这时需要将图片等资源放在.bundle文件中。 7、这样打包的framework依然有问题，如果你用了Category，别人在用你的framework时会发生崩溃。这时别人在引用时需要在工程中other linker flags中添加-objC如果依然有问题，再添加-all_load。 8、终于编译成功，但发现很多关于符号表的警告，这时需要将Generate Debug Symbols设置为NO即可关闭符号表警告。 9、但是我需要支持bitcode，以上设置后并不能使framework支持bitcode,因此还需要进行额外的设置一个命令让其支持bit code。在TAGETS的Build setting中搜索Other C Flags，添加命令“-fembed-bitcode”。同样的设置在PROJECT中。如果不进行以上操作。别人在集成你的framework时可以编译，亦可以真机测试。唯独在打包时会发出警告并打包失败。警告为framework不支持bitcode！ 10、无论SDK还是Framework都需要暴露公共的头文件以供使用者读取和。在TARGETS-&gt;Build Phases-&gt;Headers里面，有三种类别。Public(公共的)，这里存放供其他人查看的header。Private(私有的)这里存放私有的Header，以上两个Headers存放位置都会暴露出来，所有人可以查看。有些Header是不想给别人看到的。这种header放在第三个类Project中。 11、打包。Edit Scheme-&gt;Build Configuration-&gt;选为Release然后Run. 直接导出方法： 1.添加 target --&gt; other --&gt;aggregate 2.在新建的Target里边添加一个脚本:Build Phases --&gt;new Run Script Phase 3.填入下面脚本到 Run Script 查询framework支持架构：打开终端 lipo -info +路径 # begin ============================================= # Sets the target folders and the final framework product. # 如果工程名称和Framework的Target名称不一样的话，要自定义FMKNAME # 例如: FMK_NAME = &quot;MyFramework&quot; FMK_NAME=${PROJECT_NAME} # Install dir will be the final output to the framework. # The following line create it in the root folder of the current project. INSTALL_DIR=${SRCROOT}/Products/${FMK_NAME}.framework # Working dir will be deleted after the framework creation. WRK_DIR=build DEVICE_DIR=${WRK_DIR}/Release-iphoneos/${FMK_NAME}.framework SIMULATOR_DIR=${WRK_DIR}/Release-iphonesimulator/${FMK_NAME}.framework # -configuration ${CONFIGURATION} # Clean and Building both architectures. xcodebuild -configuration &quot;Release&quot; -target &quot;${FMK_NAME}&quot; -sdk iphoneos -arch armv7 -arch armv7s -arch arm64 clean build xcodebuild -configuration &quot;Release&quot; -target &quot;${FMK_NAME}&quot; -sdk iphonesimulator -arch x86_64 clean build # Cleaning the oldest. if [ -d &quot;${INSTALL_DIR}&quot; ] then rm -rf &quot;${INSTALL_DIR}&quot; fi mkdir -p &quot;${INSTALL_DIR}&quot; cp -R &quot;${DEVICE_DIR}/&quot; &quot;${INSTALL_DIR}/&quot; # Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product. lipo -create &quot;${DEVICE_DIR}/${FMK_NAME}&quot; &quot;${SIMULATOR_DIR}/${FMK_NAME}&quot; -output &quot;${INSTALL_DIR}/${FMK_NAME}&quot; rm -r &quot;${WRK_DIR}&quot; open &quot;${SRCROOT}/Products/&quot; # end =============================================== PS:脚本需要跑一遍真机，再跑一遍模拟器才会build success]]></content>
      <tags>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多米尼克体系-编码表]]></title>
    <url>%2F2017%2F03%2F29%2Fmemory%20encoding%2F</url>
    <content type="text"><![CDATA[声母编码声母正好20个，可以规划为2x10赋予10个数两组编码bpmf-dtnl-gkh-jqx-zcsr-yw特殊：aoe iuv 都当做是0 0 1 2 3 4 5 6 7 8 9 d y z m s w l q b j c t r k p h n f x g 0~9 编码 数字 声母 联想 0 d 蛋/洞/鼎/盾 1 y 雁/蚁/鱼/鹰 2 z 嘴/粽/枣/砖 3 m 矛/帽/马/锚 4 s 伞/锁/扇/梳 5 w 碗/蛙/网/瓦 6 l 锣/龙/狼/螺 7 q 球/桥/枪/钳 8 b 豹/靶/蚌/笔 9 j 酒/剑/剪/锯 00~99 编码 数字 声母 生物 行为 00 dd-dc-cd-cc 大盗 蒙面持短刀 01 dy-dt-cy-ct 导游 持小喇叭举小旗 02 dz-dr-cz-cr 队长/DZ 臂章五道杠 03 dm-dk-cm-ck 达摩 头顶有三排戒疤 04 ds-dp-cs-cp 袋鼠 肚子上有个口袋 05 dw-dh-cw-ch 典韦 持双戟 06 dl-dn-cl-cn 大佬 (北野武)戴墨镜+叼雪茄 07 dq-df-cq-cf 大乔 持灯笼守望着天空大海和你的回忆 08 db-dx-cb-cx 大白/大饼 碳纤维充气白外套/写代码 09 dj-dg-cj-cg 妲己 漏出狐狸尾巴 10 yd-yc-td-tc 玉帝 头戴皇冠 11 yy-yt-ty-tt 爷爷 带着老花镜 12 yz-yr-tz-tr 鸭子 扁扁的嘴巴+展开的鸭掌 13 ym-yk-tm-tk 姚明/樱木 红色的头发+灌篮 14 ys-yp-ts-tp 耶稣 绑在十字架上 15 yw-yh-tw-th 叶问 打咏春拳 16 yl-yn-tl-tn 月老 牵红线 17 yq-yf-tq-tf 月骑 骑黑豹+持月刃 18 yb-yx-tb-tx 伊布 从精灵球里出来 19 yj-yg-tj-tg 杨戬 持三叉戟+三眼 20 zd-zc-rd-rc 周董 “哎呦不错哟” 21 zy-zt-ry-rt 赵云 持龙胆枪和青釭剑 22 zz-zr-rz-rr 庄周/蜘蛛 骑鲲/吐丝结网 23 zm-zk-rm-rk 掌门 《九阴真经》 24 zs-zp-rs-rp 宙斯 手持雷霆和宙斯之盾 25 zw-zh-rw-rh 张伟/纣王 吃小龙虾过敏/好酒淫乐 26 zl-zn-rl-rn 蟑螂 头上有两黑色大触须 27 zq-zf-rq-rf 朱雀 全身火焰献祭 28 zb-zx-rb-rx 张苞 继承丈八蛇矛 29 zj-zg-rj-rg 张角 头戴黄巾可引雷 30 md-mc-kd-kc 马东/麦兜 奇葩说议长/猪鼻子端着一碗鱼丸粗面 31 my-mt-ky-kt 马云/蚂蚁 淘宝董事长/成群结队搬运糖 32 mz-mr-kz-kr 蚂蚱 啃食庄稼 33 mm-mk-km-kk 孟母/妈妈 收拾行李准备搬家/围裙+颠勺 34 ms-mp-ks-kp 牧师 一身黑袍持法杖施法 35 mw-mh-kw-kh 猫王 飞机头 36 ml-mn-kl-kn 马良 用神笔画龙点睛 37 mq-mf-kq-kf 米奇 拿着彩色气球 38 mb-mx-kb-kx 麦霸 在KTV抢麦唱歌 39 mj-mg-kj-kg 母鸡 下鸡蛋 40 sd-sc-pd-pc 上帝 头带光圈 41 sy-st-py-pt 鲨鱼 有垂直的背鳍 42 sz-sr-pz-pr 狮子 脸边缘长满鬃毛 43 sm-sk-pm-pk 水母 透明发光 44 ss-sp-ps-pp 松鼠 吃松子 45 sw-sh-pw-ph 孙武/沙王 著《孙子兵法》/摇尾释放地震波 46 sl-sn-pl-pn 神乐 拿着雨伞枪，吃着醋昆布 47 sq-sf-pq-pf 圣骑 带有圣盾 48 sb-sx-pb-px 孙膑 著《孙膑兵法》 49 sj-sg-pj-pg 沙加 穿处女座黄金圣衣 50 wd-wc-hd-hc 卧底 黑色皮衣+手枪:我想做个好人 51 wy-wt-hy-ht 乌鸦 往瓶子里填石子 52 wz-wr-hz-hr 蚊子 长长尖尖的嘴能戳破皮肤 53 wm-wk-hm-hk 无名/网民 万剑归宗/用键盘输出 54 ws-wp-hs-hp 武松 用碗喝酒+打虎 55 ww-wh-hw-hh 王维 画中有诗 56 wl-wn-hl-hn 卧龙 羽扇纶巾 57 wq-wf-hq-hf 雾切 猎鹿帽+披风=超高级侦探 58 wb-wx-hb-hx 王八 藏在龟壳里 59 wj-wg-hj-hg 武警/吴京 防弹衣+防弹头盔+步枪 60 ld-lc-nd-nc 林丹 持羽毛球拍 61 ly-lt-ny-nt 柳岩/老鹰 S曲线身材/大翅膀盘旋在天空 62 lz-lr-nz-nr 老子/驴子 著《道德经》/拉磨 63 lm-lk-nm-nk 狸猫 翻找垃圾桶 64 ls-lp-ns-np 老师/老鼠 在讲台用教鞭敲黑板/偷吃老鼠夹上的奶酪 65 lw-lh-nw-nh 鹿丸 使用影子模仿术 66 ll-ln-nl-nn 李雷/萝莉 how r u / 穿萝莉装 67 lq-lf-nq-nf 刘谦 白手套+魔术:见证奇迹 68 lb-lx-nb-nx 刘备 持雌雄双股剑 69 lj-lg-nj-ng 李靖 手里托塔 70 qd-qc-fd-fc 乔丹 代言篮球鞋 71 qy-qt-fy-ft 屈原/琼瑶/蚯蚓 吃粽子/钻地松土 72 qz-qr-fz-fr 酋长 黝黑的皮肤脸上涂着迷彩，举行篝火晚会 73 qm-qk-fm-fk 球迷 脸上印着国旗并大声呐喊 74 qs-qp-fs-fp 琴师 弹奏古琴 75 qw-qh-fw-fh 青蛙 坐在荷花上吐舌头吃蚊子 76 ql-qn-fl-fn 麒麟 送子 77 qq-qf-fq-ff QQ 红色大围脖 78 qb-qx-fb-fx 乔巴/丘比 鹿角上带着红色帽子/签订契约 79 qj-qg-fj-fg 巧匠? (鲁班)手持锯子和小锤捣鼓木材 80 bd-bc-xd-xc 笨蛋 试卷:0分+药不能停 81 by-bt-xy-xt 贝爷 吃虫子,嘎嘣脆 82 bz-br-xz-xr 包拯 脸黑+月亮印 83 bm-bk-xm-xk 斑马 黑白条纹皮肤 84 bs-bp-xs-xp 博士/白叟 带着护目镜做试验/头发斑白+独钓于江边 85 bw-bh-xw-xh 霸王? 力拔山,气盖世 86 bl-bn-xl-xn 伯乐/冰龙 识好马/巨大寒冰双翼+喷吐寒气 87 bq-bf-xq-xf 扁鹊 切脉诊病 88 bb-bx-xb-xx 宝宝 叼着奶嘴 89 bj-bg-xj-xg 八戒 拿着钉耙挥舞 90 jd-jc-gd-gc 角都/间谍 有多个心脏/窃取文件机密 91 jy-jt-gy-gt 鲸鱼 头顶喷水柱 92 jz-jr-gz-gr 精子/军长 数量繁多+白色小尾巴/衣带肩章 93 jm-jk-gm-gk 巨魔 投射火焰长矛 94 js-jp-gs-gp 剑圣 持剑使出剑刃风暴 95 jw-jh-gw-gh 九尾 有九条尾巴 96 jl-jn-gl-gn 蛟龙/精灵 腾云驾雾 97 jq-jf-gq-gf 警犬 安检闻行李 98 jb-jx-gb-gx 街霸/嘉宾 释放冲击波 99 jj-jg-gj-gg 交警 在交警亭里指挥交通+开罚单 PS:可以根据自己熟悉的事物来编码，以上只是为自己整理的编码表。 参考 多米尼克体系-中文记忆法]]></content>
      <tags>
        <tag>Memory</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用github+jekyll搭建博客]]></title>
    <url>%2F2016%2F09%2F23%2Fsetup%20blog%2F</url>
    <content type="text"><![CDATA[2017-07-06 更新改用Hexo建站 参考： hexo你的博客 手把手教你使用Hexo + Github Pages搭建个人独立博客 在GitHub上创建repository搭建要用github pages，首先要在github中建立一个基于你的用户名的repository: 比如说我，就要建立名为passerbycrk.github.io的repo。在以前的github版本中还需要在后台开启pages的功能，现在系统检测到这样的repo名称之后，会在setting中自动开启GitHub Pages的功能，如下图：这样之后你就可以把这个repo克隆到本地随意进行修改了，在这个里面上传的网页就是你的网站的内容了，可以上传一个index.html试一试，这就是你的网站主页了。关于GiuHub的使用，可以看几个比较好的入门教程：GiuHub使用教程传送门 集成本地部署环境之后我们就要在本地部署jekyll，jekyll的原理很简单。这是一个已经合成好的静态html网站结构，你用这个结构在username,github.io文件夹里面粘帖好所有文件。再把更新完的本地repo推送到GitHub的master branch里面，你的网站就更新建设完毕了。首先你需要ruby来使用本地jekyll。Mac和Linux可以用Terminal配合yum或者brew这样的包管理器很方便的安装ruby。Windows下更是方便，可以直接中集成好的Ruby installer来进行安装，文章里的就是传送门。安装完ruby，之后就是要安装RubyGems，gem是一个ruby的包管理系统，可以用gem很方便的在本地安装ruby应用。安装方法如下: 在RubyGems官网上下载压缩包，解压到你的本地。 在Terminal中输入以下代码: $ cd your path to RubyGems // RubyGems解压的位置 $ ruby setup.rb 安装jekyll有了gem之后安装jekyll就很容易了，其实用过nodejs和npm的同学应该很熟悉这样的包安装，真是这个世界手残脑残们的救星。。。。。（楼主不自觉的摸了摸自己快残了的手） 接下来在Terminal中输入安装jekyll代码： $ gem install jekyll 等待安装完成。 文件目录结构好了，现在你的电脑已经准备完毕了。如果你是想自己捣鼓，可以根据这样的目录结构在你的{username}.github.io文件夹下建立以下目录结构： ├── _config.yml ├── _drafts | ├── begin-with-the-crazy-ideas.textile | └── on-simplicity-in-technology.markdown ├── _includes | ├── footer.html | └── header.html ├── _layouts | ├── default.html | └── post.html ├── _posts | ├── 2007-10-29-why-every-programmer-should-play-nethack.textile | └── 2009-04-26-barcamp-boston-4-roundup.textile ├── _site └── index.html 选择模板如果你只是个普通用户，只是想要一个模板然后开始写自己的博客。那就很容易了，有几个可以简单开始的模板。 极简风格的模板:https://github.com/poole/poole jekyll的模板网站:http://jekyllthemes.org/ 本地部署发布下载完了模板，可以吧里面的内容解压到你自己的网站目录底下。这时候你可以测试一下： $ cd your website path // cd到你的网站目录下 $ jekyll serve 接下来部署的博客会运行在 http://localhost:4000/ 在浏览器中输入以上地址回车后就可以看到你用模板搭建的网站了。 配置这时候可以看一下jekyll的设置，让你把模板变成你自己个性化的内容。在网站根目录下面找到 _config.yml,这里会有几个比较关键的设置：里面的permalink 就是你博客文章的目录结构，可以用pretty来简单的设置成日期+文章标题.html，也可以用自己喜欢的结构来设置。记得把encoding 设置成utf-8，这样有利于中英文双语的写作和阅读。 发布内容到这里你就可以开始写博客了，所有的文章直接放在_posts文件夹下面，格式就是我们之前提到的markdown文件，默认的格式是.md和.markdown文件。每篇文章的开始处需要使用yml格式来写明这篇文章的简单介绍，格式如下： --- layout: post title: &quot;文章标题&quot; subtitle: &quot;文章副标题&quot; date: 2016-09-23 12:00:00+00:00 author: &quot;作者昵称&quot; --- layout就是post，让jekyll知道你这是一篇post，很直观。需要注意的是里面的date，必须按照yml的语法来写，否则就会出现编译错误。可以只用YYYY-MM-DD来显示日期，也可以像我一样在后面加上 HH:MM:SS+00:00 来表示更具体的时间。 结束到此为止可以开始尽情的写博客了，用GitHub软件同步到你的repository里面，网站上面就可以进行正常的显示了。 参考 在github pages网站下用jekyll制作博客教程 Hux blog 模板 leonids 模板]]></content>
      <tags>
        <tag>Tutorial</tag>
      </tags>
  </entry>
</search>